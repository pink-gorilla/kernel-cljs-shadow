;; gorilla-repl.fileformat = 2

;; @@ [meta]
{:name "quil svg demo", :tagline "charts with quil", :tags "cljs, demo, quil, svg", :description ""}

;; @@

;; **
;;; # Quil 
;;; 
;;; http://quil.info
;;; 
;;; Note: the canvas currently does not get saved to the notebook. This is because dynamic reagent components cannot be persisted,
;; **

;; @@ [cljs]
;(require '[awb99.shapes.core :as s])

(ns mydemo.quil
  (:require 
   [quil.core]
   [quil.middleware]))
;; @@
;; =>
;;; ["^ ","~:type","~:html","~:content",["~:span",["^ ","~:class","clj-nil"],"nil"],"~:value","nil"]
;; <=

;; @@ [cljs]
(defn init [width height]
  (fn []
    {:width   width
     :height  height
     :circles []}))

(defn draw [{:keys [circles]}]
  (quil.core/background 255)
  (doseq [{[x y] :pos [r g b] :color} circles]
    (quil.core/fill r g b)
    (quil.core/ellipse x y 10 10)))

(defn update-state [{:keys [width height] :as state}]
  (update state :circles conj {:pos   [(+ 20 (rand-int (- width 40)))
                                       (+ 20 (rand-int (- height 40)))]
                               :color (repeatedly 3 #(rand-int 250))}))

;; @@
;; =>
;;; ["^ ","~:type","~:html","~:content",["~:span",["^ ","~:class","clj-unknown"],"#'mydemo.quil/update-state"],"~:value","#'mydemo.quil/update-state"]
;; <=

;; @@ [cljs]
(defn canvas []
  (let [width  500; (/ (.-innerWidth js/window) 2)
        height 500;/ (.-innerHeight js/window) 2)
                ]
    (reagent.core/create-class
     {:component-did-mount
      (fn [component]
        (quil.core/sketch
           :host       (reagent.core/dom-node component)
           :draw       draw
           :setup      (init width height)
           :update     update-state
           :size       [width height]
           :middleware [quil.middleware/fun-mode]))
      :render
      (fn []
        [:div])})))
;; @@
;; =>
;;; ["^ ","~:type","~:html","~:content",["~:span",["^ ","~:class","clj-unknown"],"#'mydemo.quil/canvas"],"~:value","#'mydemo.quil/canvas"]
;; <=

;; @@ [cljs]
(pinkgorilla.notebook.repl/r! 
 [canvas])
;; @@
;; =>
;;; {}
;; <=

;; @@ [clj]

;; @@
;; ->
;;; 
;; <-
;; =>
;;; ["^ ","~:type","html","~:value",["~:span"]]
;; <=
